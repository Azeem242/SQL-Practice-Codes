Scenario : The Trust & Safety team is investigating repeat offenders who are violating platform policies. Some users have multiple violations, and in certain cases, they continue violating even after receiving warnings.

The Head of Trust & Safety wants to identify users who:
    Have at least 3 policy violations in the last 6 months.
    Continued violating the platform's policies even after receiving a warning.
    Their most recent violation happened within the last 30 days.

Available Tables:
1. users
    user_id (Primary Key)
    username
    account_status (e.g., 'Active', 'Suspended')
    join_date
    country

2.violations
    violation_id (Primary Key)
    user_id (Foreign Key → users)
    violation_type (e.g., 'Hate Speech', 'Spam', 'Misinformation')
    violation_date (Date of violation)
    action_taken (e.g., 'Warning Issued', 'Temporary Ban', 'No Action')
    
3.warnings
    warning_id (Primary Key)
    user_id (Foreign Key → users)
    warning_date (Date when the warning was issued)
    warning_reason (e.g., 'Repeated Hate Speech', 'Misinformation Spread')

Question: Write a SQL query to identify users who meet all the criteria:

At least 3 violations in the last 6 months.
        Received at least one warning before their latest violation.
        Most recent violation happened in the last 30 days.

Columns to print:
        user_id
        username
        total_violations_last_6_months
        last_violation_date
        warnings_received
        account_status

CODE : 
SELECT 
    u.user_id,
    u.username,
    COUNT(v.violation_id) AS total_violations_last_6_months, 
    MAX(v.violation_date) AS last_violation_date,
    CASE 
        WHEN COUNT(w.warning_id) > 0 THEN 'Yes' 
        ELSE 'No' 
    END AS warnings_received,
    u.account_status
FROM users AS u
JOIN violations AS v 
    ON u.user_id = v.user_id
LEFT JOIN warnings AS w 
    ON u.user_id = w.user_id
WHERE v.violation_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)
GROUP BY u.user_id, u.username, u.account_status
HAVING 
    COUNT(v.violation_id) >= 3 
    AND MAX(v.violation_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
ORDER BY total_violations_last_6_months DESC;

==================================================================================================================================

Scenario: You're working as a Trust and Safety Analyst for a social media platform. Your job is to identify users who are repeatedly posting policy-violating content.

The database has three tables:
1. users
user_id (Primary Key)
username
account_status (e.g., 'Active', 'Suspended')
join_date
country

2. posts
post_id (Primary Key)
user_id (Foreign Key → users)
content
post_date
status (e.g., 'Active', 'Removed')

3. violations
violation_id (Primary Key)
post_id (Foreign Key → posts)
violation_type (e.g., 'Hate Speech', 'Misinformation', 'Spam')
review_date
action_taken (e.g., 'Warning Issued', 'Post Removed', 'User Suspended')

TASK : Write an SQL query to identify users who have had at least 3 posts removed in the last 3 months due to policy violations and are still active users. 
Sort the results by the number of violations in descending order.

SOLUTION : 
SELECT 
    u.user_id, 
    u.username, 
    COUNT(p.post_id) AS total_posts, 
    COUNT(v.violation_id) AS removed_posts, 
    GROUP_CONCAT(DISTINCT v.violation_type SEPARATOR ', ') AS violation_types, 
    MAX(v.review_date) AS last_violation_date, 
    u.account_status
FROM users AS u
JOIN posts AS p ON u.user_id = p.user_id
JOIN violations AS v ON p.post_id = v.post_id
WHERE 
    u.account_status = 'Active' 
    AND v.review_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)
GROUP BY u.user_id, u.username, u.account_status
HAVING COUNT(v.violation_id) >= 3
ORDER BY removed_posts DESC;
==================================================================================================================================
